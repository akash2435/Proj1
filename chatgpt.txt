using GPSCP.Common;
using GPSCP.Common.GPSGlobalSettings;
using GPSCP.Core.Web.Api;
using GPSCP.Core.Web.Api.Filters;
using GPSCP.Identity;
using GPSCP.Models;
using GPSCP.Models.Common;
using GPSCP.Models.Email;
using GPSCP.Models.Menus.ProductsMenu;
using GPSCP.Models.Menus.QuickMenu;
using GPSCP.Models.Site;
using GPSCP.Models.User;
using GPSCP.TokenProviders;
using GPSCP.Web.Models;
using Microsoft.Ajax.Utilities;
using Microsoft.AspNet.Identity;
using Newtonsoft.Json.Linq;
using NLog;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Http;
using GPSCP.Models.Membership;
using System.Net.Mail;
using System.ComponentModel.DataAnnotations;
using GPS.Common.Identity;

namespace GPSCP.Web.Controllers
{
    [AuthorizeExtended]
    public class UserController : BaseApiController
    {
        private static readonly Logger Log = LogManager.GetLogger("databaseLogger");

        [AllowAnonymous]
        [HttpGet]
        public List<KeyValuePair<string, Guid>> GetSalesRepUserList(string stateAbbr, string countyName,
            string registrationToken, bool newUser = true)
        {

            if (newUser)
            {
                var response = Validate_NewUserRegistrationRequestToken(registrationToken);
                if (response.HasErrors || response.HasValidationErrors)
                    return new List<KeyValuePair<string, Guid>>();
            }
            else
            {
                var response = BrandAccessRequestTokenHandler.ValidateToken(getHost(), token: registrationToken);
                if (response.HasErrors || response.HasValidationErrors)
                    return new List<KeyValuePair<string, Guid>>();
            }

            return Factory.UserService.GetParentUserList(stateAbbr, countyName);
        }

        [AllowAnonymous]
        [HttpGet]
        public List<KeyValuePair<string, Guid>> GetSalesRepByUniqueId(Guid uniqueId, string registrationToken,
            bool newUser = true)
        {
            List<KeyValuePair<string, Guid>> salesRepDetails = new List<KeyValuePair<string, Guid>>();
            if (!newUser)
                return salesRepDetails;

            var response = Validate_NewUserRegistrationRequestToken(registrationToken);
            if (response.HasErrors || response.HasValidationErrors)
                return salesRepDetails;
            string name = Factory.UserService.GetUserNameByUniqueId(uniqueId);

            if (!string.IsNullOrWhiteSpace(name))
                salesRepDetails.Add(new KeyValuePair<string, Guid>(name, uniqueId));
            return salesRepDetails;

        }

        [AllowAnonymous]
        [System.Web.Http.HttpPost]
        public UserRegistrationResponse RegisterUser([FromBody] UserRegistrationRequest request)
        {
            var response = new UserRegistrationResponse();

            if (!IsValidUserModel(request))
            {
                response.SetResponseMessage(new ResponseMessage() { Level = GPSCP.Models.ResponseMessage.LevelEnum.Validation, Message = "Invalid user details passed." });
                return response;
            }

            try
            {
                if (!ConfigManager.Okta.Settings.UseOktaAuthentication)
                {
                    var result = new AccountController().IsPasswordOnBlackList(request.Password);
                    if (result)
                    {
                        response.Messages.Add(new ResponseMessage()
                        {
                            Message = "Registration failed, Password is weak / predictable or is on a list of known, exploited passwords.",
                            Level = GPSCP.Models.ResponseMessage.LevelEnum.Validation
                        });
                        return response;
                    }

                    if (!ContrastSecurityValidators.IsPasswordUnderMaxLength(request.Password.Length))
                    {
                        response.Messages.Add(new ResponseMessage()
                        {
                            Message = "Registration failed, Password is more than maximum 128 characters",
                            Level = GPSCP.Models.ResponseMessage.LevelEnum.Validation
                        });
                        return response;
                    }
                }
                else
                {
                    request.Password = Guid.NewGuid().ToString();
                }

                AspNetProfile salesRep = Factory.UserService.GetUserProfileByUniqueId(request.SaleExecutive);
                if (salesRep == null)
                {
                    response.Messages.Add(new ResponseMessage()
                    {
                        Message = "Registration failed. Sales Rep does not exist.",
                        Level = GPSCP.Models.ResponseMessage.LevelEnum.Validation
                    });
                    return response;
                }

                request.SaleExecutive = salesRep.UserId;
                request.EmailAddress = request.EmailAddress;
                request.FirstName = request.FirstName;
                request.LastName = request.LastName;
                request.CompanyName = request.CompanyName;
                request.Phone = request.Phone;
                request.CellPhone = request.CellPhone;
                request.PhoneType = request.PhoneType;
                request.Address1 = request.Address1;
                request.Address2 = request.Address2;
                request.Zip = request.Zip;
                request.City = request.City;
                request.County = request.County;
                request.Fips = request.Fips;
                request.State = request.State;

                return Factory.UserService.RegisterUser(request);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "UserController.RegisterUser");
                response.Messages.Add(new GPSCP.Models.ResponseMessage("Server is busy. Please try after sometime",
                    GPSCP.Models.ResponseMessage.LevelEnum.Error));
                return response;
            }
        }

        private bool IsValidUserModel(UserRegistrationRequest model)
        {
            var context = new ValidationContext(model);
            var results = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(model, context, results, true);

            if (isValid)
            {
                Console.WriteLine("Model is valid.");
                return true;
            }
            else
            {
                foreach (var validationResult in results)
                {
                    Console.WriteLine(validationResult.ErrorMessage);
                }

                return false;
            }
        }

        [AllowAnonymous]
        [System.Web.Http.HttpGet]
        public UserExistsResponse UserExists(string username, string key)
        {
            UserExistsResponse response = new UserExistsResponse();
            EmailResponse emailResponse = new EmailResponse();
            bool isValidEmail = Regex.IsMatch(username, "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$");

            // to handle automated test
            string env = ConfigurationManager.AppSettings["ApplicationStage"];

            var skipValidateCaptcha = (env != "PROD" && username.ToLower().Contains("auto"));

            if (string.IsNullOrEmpty(username) || (skipValidateCaptcha == false && string.IsNullOrEmpty(key)) || !isValidEmail)
            {
                response.IsValidRequest = false;
                response.Messages.Add(new ResponseMessage()
                {
                    Message = "Invalid input. Please try again",
                    Level = GPSCP.Models.ResponseMessage.LevelEnum.Error
                });
            }
            else
            {
                // validate the key

                if (skipValidateCaptcha)
                    response.IsValidRequest = true;
                else
                    response.IsValidRequest = IsReCaptchValid(key);


                if (!response.IsValidRequest)
                {
                    return response;
                }

                var userData = Factory.UserManager.FindByNameAsync(username).Result;

                if (userData != null && Guid.Empty != userData.Id)
                {
                    //response.IsUserExists = true;
                    var currentBrandId = SiteUtilities.GetCurrentBrandId();
                    var userBrands = Factory.UserManager.GetUserBrands(userData.Id);
                    response.IsCurrentBrandRegistered =
                        userBrands != null && userBrands.Where(x => x.BrandId == currentBrandId).Any();
                    response.RegisteredInAnotherBrand =
                        userBrands != null && userBrands.Where(x => x.BrandId != currentBrandId).Any();
                    if (response.IsCurrentBrandRegistered == false &&
                        AppSettingsHelper.AllowMultiBrandRegistration == true)
                    {
                        try
                        {
                            LLAResponse llaAcceptamce =
                                Factory.SiteService.GetLiabilityAgreementByEmail(userData.Email);
                            var llaAccepted = (!llaAcceptamce.HasErrors
                                               && llaAcceptamce.LiabilityAgreement != null
                                               && llaAcceptamce.LiabilityAgreement.AgreeStatus ==
                                               AgreeStatusEnum.Agree);

                            var claims = Factory.UserManager.GetClaims(userData.Id);

                            var token = BrandAccessRequestTokenHandler.GenerateToken(getHost(), userData.Id,
                                userData.Email, SiteUtilities.GetCurrentBrandId(), llaAccepted,
                                claims); // Factory.UserManager.GenerateUserToken(TokenPurposeType.RegisterToDifferentBrand.ToString(), userData.Id);
                            emailResponse = Factory.UserService.SendUserRegistrationValidationMail(userData.Id,
                                userData.Email, SiteUtilities.GetCurrentBrandId(), token);
                            if (emailResponse.HasErrors)
                            {
                                foreach (var item in emailResponse.Messages)
                                {
                                    response.SetResponseMessage(new ResponseMessage(item.Message, item.Level));
                                }

                            }

                            response.SentEmail = true;
                        }
                        catch (Exception ex)
                        {
                            Log.Error(ex, "Sorry! Something went wrong. Please try after some time");
                            response.Messages.Add(new ResponseMessage()
                            {
                                Message = "Sorry! Something went wrong. Please try after some time",
                                Level = GPSCP.Models.ResponseMessage.LevelEnum.Error
                            });
                        }
                    }
                    else if (response.IsCurrentBrandRegistered)
                    {
                        emailResponse = Factory.UserService.SendUserExistsInCurrentBrandMail(userData.Id,
                            userData.Email, SiteUtilities.GetCurrentBrandId());
                        if (emailResponse.HasErrors)
                        {
                            response.SentEmail = false;
                            foreach (var item in emailResponse.Messages)
                            {
                                response.SetResponseMessage(new ResponseMessage(item.Message, item.Level));
                            }

                        }
                        else
                            response.SentEmail = true;
                    }
                }
                else
                {
                    emailResponse = Factory.UserService.SendNewUserRegistrationMail(username,
                        SiteUtilities.GetCurrentBrandId(), SiteUtilities.ApplicationURL);
                    if (emailResponse.HasErrors)
                    {
                        response.SentEmail = false;
                        foreach (var item in emailResponse.Messages)
                        {
                            response.SetResponseMessage(new ResponseMessage(item.Message, item.Level));
                        }
                    }
                    else
                        response.SentEmail = true;
                }

            }


            //return Factory.UserManager.FindByNameAsync(username).Result != null;

            return response;
        }

        [AllowAnonymous]
        [HttpGet]
        public NewUserRegistrationTokenAccessResponse ValidateNewUserRegistrationRequestToken(string token)
        {
            //NewUserRegistrationTokenAccessResponse response = new NewUserRegistrationTokenAccessResponse();
            //Guid parsedToken = new Guid();
            //bool tokeParsed = Guid.TryParse(token, out parsedToken);

            //bool isUseOktaAuthentication = false;
            //bool.TryParse(ConfigurationManager.AppSettings["okta:UseOktaAuthentication"], out isUseOktaAuthentication);

            //if (tokeParsed)
            //{
            //    response = Factory.UserService.GetNewUserRegistrationTokenDetails(parsedToken,
            //        SiteUtilities.GetCurrentBrandId());
            //    response.IsPasswordRequired = !isUseOktaAuthentication;
            //}
            //else
            //{
            //    response.Messages.Add(new ResponseMessage(
            //        "We are sorry! We could not find you in our system. Please register.",
            //        GPSCP.Models.ResponseMessage.LevelEnum.Error));
            //}

            return Validate_NewUserRegistrationRequestToken(token);

        }

        private NewUserRegistrationTokenAccessResponse Validate_NewUserRegistrationRequestToken(string token)
        {
            NewUserRegistrationTokenAccessResponse response = new NewUserRegistrationTokenAccessResponse();
            Guid parsedToken = new Guid();
            bool tokeParsed = Guid.TryParse(token, out parsedToken);

            if (tokeParsed)
            {
                response = Factory.UserService.GetNewUserRegistrationTokenDetails(parsedToken,
                    SiteUtilities.GetCurrentBrandId());
                response.IsPasswordRequired = !ConfigManager.Okta.Settings.UseOktaAuthentication;
            }
            else
            {
                response.Messages.Add(new ResponseMessage(
                    "We are sorry! We could not find you in our system. Please register.",
                    GPSCP.Models.ResponseMessage.LevelEnum.Error));
            }

            return response;

        }

        [HttpGet]
        public List<PendingApprovalUser> GetPendingApprovalUsers()
        {
            return Factory.UserService.GetPendingApprovalUsers(this.User.Identity.GetUserGuid(),
                SiteUtilities.GetCurrentBrandId(), this.User.Identity.GetDefaultOperationId());
        }

        [AllowAnonymous]
        [HttpGet]
        public BrandAccessRequestValidationResponse ValidateBrandAccessRequestToken(string token)
        {

            var response = BrandAccessRequestTokenHandler.ValidateToken(getHost(), token);
            if (response != null)
            {
                var userBrand = Factory.UserManager.GetUserBrands(response.UserId)
                    .Where(x => x.BrandId == SiteUtilities.GetCurrentBrandId()).FirstOrDefault();

                if (userBrand != null)
                {
                    if (userBrand.IsApproved)
                    {
                        response.Status = UserBrandStatus.Approved.ToString();
                        response.Messages.Add(new GPSCP.Models.ResponseMessage($"Your request is already approved",
                            GPSCP.Models.ResponseMessage.LevelEnum.Message));
                    }
                    else
                    {
                        response.Status = UserBrandStatus.PendingApproval.ToString();
                        response.Messages.Add(new GPSCP.Models.ResponseMessage($"Your request is pending for approval",
                            GPSCP.Models.ResponseMessage.LevelEnum.Message));
                    }

                }
                else
                {
                    response.Status = UserBrandStatus.NotIn.ToString();
                }
            }

            return response;
        }

        [AllowAnonymous]
        [HttpPost]
        public UserRegistrationResponse ProcessBrandAccessRegistration([FromBody] BrandAccessRequest request)
        {
            var response = new UserRegistrationResponse();
            if (request != null)
            {
                var validateToken = BrandAccessRequestTokenHandler.ValidateToken(getHost(), request.Token);
                if (validateToken != null && validateToken.UserId != Guid.Empty)
                {
                    request.UserId = validateToken.UserId;
                    request.Email = validateToken.Email;
                    request.BrandId = validateToken.BrandId;
                    AspNetProfile salesRep = Factory.UserService.GetUserProfileByUniqueId(request.ParentUserId);
                    if (salesRep == null)
                    {
                        response.Messages.Add(new ResponseMessage()
                        {
                            Message = "Registration failed. Sales Rep does not exist.",
                            Level = GPSCP.Models.ResponseMessage.LevelEnum.Validation
                        });
                        return response;
                    }

                    request.ParentUserId = salesRep.UserId;

                    response = Factory.UserService.ProcessBrandAccessRegistration(request);
                }
                else
                {
                    response.Messages.Add(new GPSCP.Models.ResponseMessage("Invalid request",
                        GPSCP.Models.ResponseMessage.LevelEnum.Warning));
                }
            }

            return response;
        }

        private bool IsReCaptchValid(string captchaResponse)
        {
            var result = false;
            var secretKey = ConfigurationManager.AppSettings["ReCaptchaSecretKey"];
            var apiUrl = "https://www.recaptcha.net/recaptcha/api/siteverify?secret={0}&response={1}";
            var requestUri = string.Format(apiUrl, secretKey, captchaResponse);
            var request = (HttpWebRequest)WebRequest.Create(requestUri);

            using (WebResponse response = request.GetResponse())
            {
                using (StreamReader stream = new StreamReader(response.GetResponseStream()))
                {
                    JObject jResponse = JObject.Parse(stream.ReadToEnd());
                    var isSuccess = jResponse.Value<bool>("success");
                    result = (isSuccess) ? true : false;
                }
            }

            return result;
        }

        private bool IsValidEmailAddress(string emailAddress)
        {
            try
            {
                var email = new MailAddress(emailAddress);
                return email.Address == emailAddress.Trim();
            }
            catch
            {
                return false;
            }
        }

        [AllowAnonymous]
        [ActionName("emailPasswordLink")]
        [HttpGet]
        public EmailForgotPasswordLinkResponse emailPasswordLink(string userName, string key)
        {
            EmailForgotPasswordLinkResponse response = new EmailForgotPasswordLinkResponse();
            userName = HttpUtility.HtmlEncode(userName);

            if (!string.IsNullOrEmpty(userName) && !string.IsNullOrEmpty(key) && !IsValidEmailAddress(userName))
            {
                response.IsValidRequest = false;
                response.Messages.Add(new ResponseMessage("Invalid Email Address. Please try again",
                    GPSCP.Models.ResponseMessage.LevelEnum.Error));
            }

            // to handle automated test
            string env = ConfigurationManager.AppSettings["ApplicationStage"];

            if (env != "PROD" && userName.ToLower().Contains("auto"))
            {
                response.IsValidRequest = true;
                string host = HttpContext.Current.Request.Url.Scheme + "://" + HttpContext.Current.Request.Url.Host;
                var result =
                    UserManager.EmailForgotPasswordLink(userName, host, Factory.SiteService.GetCurrentBrandId());
                foreach (ResponseMessage resultMessage in result.Messages)
                {
                    response.Messages.Add(new ResponseMessage(resultMessage.Message, resultMessage.Level));
                }

                return response;
            }


            if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(key))
            {
                response.IsValidRequest = false;
                response.Messages.Add(new ResponseMessage("Invalid input. Please try again",
                    GPSCP.Models.ResponseMessage.LevelEnum.Error));
            }
            else
            {
                response.IsValidRequest = IsReCaptchValid(key);
                string host = HttpContext.Current.Request.Url.Scheme + "://" + HttpContext.Current.Request.Url.Host;
                EmailResponse result =
                    UserManager.EmailForgotPasswordLink(userName, host, Factory.SiteService.GetCurrentBrandId());
                if (result != null && (result.HasErrors || result.HasValidationErrors))
                {
                    foreach (ResponseMessage resultMessage in result.Messages)
                    {
                        response.Messages.Add(new ResponseMessage(resultMessage.Message, resultMessage.Level));
                    }
                }
                //this info should not be sent to client side
                //response.EmailLinkSent = result.Result.Succeeded;
            }

            return response;
        }


        [System.Web.Http.HttpGet]
        [ActionName("GetUserInfoById")]
        public ConcurrentDictionary<string, string> GetUserInfoById(Guid userId)
        {
            //Guid loggedInUserId = this.User.Identity.GetUserGuid();
            //if (!string.IsNullOrEmpty(loggedInUserId.ToString()) && loggedInUserId != Guid.Empty)
            //    userId = loggedInUserId;
            ConcurrentDictionary<string, string> userInfo = new ConcurrentDictionary<string, string>();
            ApplicationUser user = Factory.UserManager.FindByIdAsync(userId).Result;
            if (user != null)
            {
                Factory.UserManager.GetClaims(userId)
                    .ForEach(i =>
                        userInfo.TryAdd(i.Type,
                            i.Value)); // user.GenerateUserIdentityAsync(Factory.UserManager, OAuthDefaults.AuthenticationType).Result.Claims.ToList();
                Factory.UserService.UpdateUserLastActivity(userId);
                Factory.SiteService.BindStateAbbrByZip(userInfo, "Zip");
            }

            return userInfo;
        }     

        [AllowAnonymous]
        [System.Web.Http.HttpGet]
        [ActionName("GetRepInfobyId")]
        public ConcurrentDictionary<string, string> GetRepInfobyId(Guid userId)
        {
            ConcurrentDictionary<string, string> userInfo = new ConcurrentDictionary<string, string>();
            ConcurrentDictionary<string, string> repInfo = new ConcurrentDictionary<string, string>();

            //Guid loggedInUserId = this.User.Identity.GetUserGuid();
            //if (!string.IsNullOrEmpty(loggedInUserId.ToString()) && loggedInUserId != Guid.Empty)
            //    userId = loggedInUserId;

            //As per changes to Registration Page & Sales Rep fetch bu unique Id, the Registration page will send UniqueId to fetch Sales Rep Details
            //So from Unique Id fetch UserId from AspNetProfile table
            //User Story 192581: GPSCP - Modify Registration Rep List Functionality
            AspNetProfile salesRep = Factory.UserService.GetUserProfileByUniqueId(userId);
            if (salesRep == null)
            {
                return repInfo;
            }

            userId = salesRep.UserId;
            ApplicationUser user = Factory.UserManager.FindByIdAsync(userId).Result;
            if (user != null)
            {
                Factory.UserManager.GetClaims(userId)
                    .ForEach(i =>
                        userInfo.TryAdd(i.Type,
                            i.Value)); // user.GenerateUserIdentityAsync(Factory.UserManager, OAuthDefaults.AuthenticationType).Result.Claims.ToList();
                //Factory.UserService.UpdateUserLastActivity(userId);
                //Factory.SiteService.BindStateAbbrByZip(userInfo, "Zip");

                string[] repAttrs = { "PhoneWork", "Photo", "FirstName", "LastName", "Email" };

                foreach (string attr in repAttrs)
                {
                    repInfo.TryAdd(attr, userInfo[attr]);
                }
            }

            return repInfo;
        }

        //[HttpGet]
        //public IHttpActionResult GetSessionId()
        //{
        //    var result = new
        //    {
        //        sessionId = Guid.NewGuid().ToString()
        //    };

        //    return Ok(result);

        //}

        //[AllowAnonymous]
        [HttpGet]
        public ConcurrentDictionary<string, string> GetUserInfoByEmail(string email)
        {
            string currentUserEmail = this.User.Identity.GetUserName();

            if (currentUserEmail.ToLower() == email.ToLower())
            {
                ApplicationUser user = Factory.UserManager.FindByNameAsync(email).Result;
                return GetUserInfoById(user.Id);
            }
            else
            {
                return null;
            }
        }

        [HttpGet]
        public OperationUserProfileView GetOperationUserInfo(Guid userId, int operationId)
        {
            userId = this.User.Identity.GetUserGuid();
            operationId = this.User.Identity.GetDefaultOperationId();
            return Factory.UserService.GetOperationUserProfile(userId, operationId);
        }


        //[HttpGet]
        //public OperationUserProfileView getOperationUserInfo(string email, int operationId)
        //{
        //    // shouldn't use logged user's email id, in CO&E order it will be of selected user.
        //    //            email = this.User.Identity.GetUserEmail();
        //    ApplicationUser user = Factory.UserManager.FindByNameAsync(email).Result;
        //    operationId = Factory.SiteService.GetCurrentOperationId(user.Id);
        //    return Factory.UserService.GetOperationUserProfile(user.Id, operationId);
        //}

        [HttpGet]
        public OperationUserProfileView GetOperationUserInfoById(string userId, int operationId)
        {
            //Guid UserId = new Guid();
            //if (!string.IsNullOrEmpty(userId))
            //{
            //    var isConverted = Guid.TryParse(userId, out UserId);
            //    if(isConverted)
            //    UserId = new Guid(userId);
            //    else
            //        UserId = this.User.Identity.GetUserGuid();
            //}
            //else
            //{
            //    UserId = this.User.Identity.GetUserGuid();
            //}

            //The above code is commented as part of security fix.
            //This will now take logged-in userid to fetch the details
            //Bug 191800: AUTHORIZATION BYPASS - IDOR

            Guid UserId = this.User.Identity.GetUserGuid();
            operationId = Factory.SiteService.GetCurrentOperationId(UserId);
            return Factory.UserService.GetOperationUserProfile(UserId, operationId);
        }

        [HttpGet]
        public List<FrequentContact> GetFrequentContacts(Guid userId, int contactType)
        {
            List<FrequentContact> frequentContactsList =
                Factory.UserService.GetFrequentContacts(this.User.Identity.GetUserGuid(), contactType);
            return frequentContactsList;
        }

        [HttpGet]
        public FrequentContact GetByFrequentContactId(int FrequentContactId)
        {
            FrequentContact frequentContact =
                Factory.UserService.GetByFrequentContactId(FrequentContactId, this.User.Identity.GetUserGuid());

            return frequentContact;
        }

        [HttpGet]
        public List<FrequentContact> GetAllFrequentContactsByUserId(Guid userId)
        {
            List<FrequentContact> frequentContactsList =
                Factory.UserService.GetAllFrequentContactsByUserId(this.User.Identity.GetUserGuid());
            return frequentContactsList;
        }

        [HttpPost]
        public ResponseBase RemoveContact(FrequentContact contact)
        {
            contact.UserId = this.User.Identity.GetUserGuid();
            var response =
                Factory.UserService.DeleteByFrequentContactId(this.User.Identity.GetUserGuid(), contact.FreqContactId);
            return response;
        }

        [HttpGet]
        public void UpdateUserLastActivity(string userName)
        {
            //not implemented
            //  Factory.UserService.UpdateUserLastActivity(userName);
        }

        [HttpGet]
        public string GetOKTAUserProfileURL()
        {
            return ConfigManager.Okta.Links.UserProfile;
        }

        [HttpPost]
        public FrequentContactResponse SaveFrequentContact(FrequentContact contact)
        {
            var response = new FrequentContactResponse();
            contact.UserId = this.User.Identity.GetUserGuid();
            response = Factory.UserService.SaveFrequentContact(contact, this.User.Identity.GetUserGuid());
            return response;
        }

        [HttpGet]
        public OperationSummaryResponse GetOperationsForUser()
        {
            int brandId = this.User.Identity.GetCurrentBrandId();
            return Factory.UserService.GetUserOperations(brandId, this.User.Identity.GetUserGuid());
        }



        public string GetBrandName(int brandId)
        {
            return Factory.UserService.GetBrandInformation(brandId).Name;
        }

        [HttpGet]
        public OperationSummaryResponse GetOperationsForBrand()
        {
            int brandId = this.User.Identity.GetCurrentBrandId();
            return Factory.UserService.GetAllOperations(brandId);
        }

        [HttpGet]
        public List<PasswordHistory> GetUserPasswordHistory(Guid userId)
        {
            return Factory.UserService.GetUserPasswordHistory(this.User.Identity.GetUserGuid());
        }

        [HttpGet]
        public List<UserRole> GetUserOperationRoleNames(Guid userId, int operationId)
        {
            return Factory.UserService.GetUserOperationRoleNames(userId, operationId);
        }

        [HttpPost]
        public HttpResponseMessage GetManagerContactFile()
        {

            var vcardString = Factory.UserService.GetManagerContactFile(this.User.Identity.GetUserGuid(),
                this.User.Identity.GetDefaultOperationId());

            var inputEncoding = Encoding.Default;
            var outputEncoding = Encoding.GetEncoding("windows-1257");
            var vcardBytes = inputEncoding.GetBytes(vcardString);
            var outputBytes = Encoding.Convert(inputEncoding,
                outputEncoding, vcardBytes);

            var response = new HttpResponseMessage(HttpStatusCode.OK);
            response.Content = new StreamContent(new MemoryStream(outputBytes));
            response.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment");
            response.Content.Headers.ContentDisposition.FileName = "Contact.vcf";
            response.Content.Headers.ContentType = new MediaTypeHeaderValue("text/vcard");
            response.Content.Headers.ContentLength = outputBytes.Length;

            //response.Clear();
            //response.ContentType = "text/vcard";
            //response.Content = new StreamContent(new MemoryStream(outputBytes));
            //response.OutputStream.Write(outputBytes, 0, outputBytes.Length);
            //response.End();

            return response;
        }

        [HttpGet]
        public ManagerInformation GetUserManagerProfile()
        {
            var brandId = this.User.Identity.GetCurrentBrandId();
            var userId = new Guid(this.User.Identity.GetUserId());
            var operations = Factory.UserService.GetUserOperations(brandId, userId);
            int opId = 0;
            if (operations.DefaultOperation != null)
                opId = operations.DefaultOperation.OperationId;
            else if (operations.Operations.Count > 0)
                opId = operations.Operations[0].OperationId;

            if (opId == 0)
                return null;

            var response = Factory.UserService.GetUserManagerProfile(opId, userId);
            var images = GetManagerImages(response.Profile.UserInformation.UserId);
            response.ProfileImageUrl = images.PhotoUrl;
            response.TeamProfile = GetManagerTeamProfile(response.Profile.UserInformation.UserId);
            response.Links =
                Factory.QuickMenuService.GetProfileLinks(brandId, opId, response.Profile.UserInformation.UserId);
            return response;
        }

        [HttpGet]
        public UserInformationWithSocialMedia GetUserInformation()
        {
            Guid UserId = this.User.Identity.GetUserGuid();
            int OperationId = this.User.Identity.GetDefaultOperationId();
            UserInformationWithSocialMedia response =
                Factory.UserService.GetUserInformationWithSocialMedia(UserId, OperationId);
            //Explicitly making IP address blank since it is causing a security issue.
            response.UserInformation.SystemInfo.User.LiabilityAgreementStatus.IPAddress = "";
            return response;
        }

        [HttpGet]
        public UserBusCardLinksResponse GetUserBusCardLinks()
        {
            Guid userId = this.User.Identity.GetUserGuid();
            int operationId = this.User.Identity.GetDefaultOperationId();
            UserBusCardLinksResponse response = Factory.UserService.GetUserBusCardLinks(userId, operationId);

            return response;
        }

        [HttpPost]
        public ResponseBase SaveUserBusCardLink(BusCardLink bmodel)
        {
            ResponseBase response = new ResponseBase();

            Guid userId = this.User.Identity.GetUserGuid();
            int operationId = this.User.Identity.GetDefaultOperationId();
            bool success = Factory.UserService.SaveBusCardLink(bmodel, userId, operationId);

            if (!success)
                response.Messages.Add(new ResponseMessage
                {
                    Message = "Error processing your request!",
                    Level = GPSCP.Models.ResponseMessage.LevelEnum.Error
                });
            return response;
        }

        //[HttpGet]
        //public ResponseBase ChangeBusCardLinkOrder(int id, bool moveUp)
        //{
        //    Guid userId = this.User.Identity.GetUserGuid();
        //    int operationId = this.User.Identity.GetDefaultOperationId();
        //    return Factory.UserService.ChangeBusCardLinkOrder(userId, operationId, id, moveUp);
        //}

        [HttpGet]
        public string GetUserManagerFullName(int OperationId, Guid UserId)
        {
            // need manager of selected user than logged in user, so commenting below line
            //UserId = this.User.Identity.GetUserGuid();
            OperationId = this.User.Identity.GetDefaultOperationId();
            return Factory.UserService.GetUserManagerFullName(OperationId, UserId);
        }

        [HttpGet]
        public string GetManagerFullNameByOperation(int OperationId)
        {
            // need manager of selected user than logged in user, so commenting below line
            //UserId = this.User.Identity.GetUserGuid();
            var userId = this.User.Identity.GetUserGuid();
            return Factory.UserService.GetUserManagerFullName(OperationId, userId);
        }

        [HttpPost]
        public ResponseBase SaveUserInformation(UserInformationWithSocialMedia request)
        {
            var response = new ResponseBase();
            request.UserInformation.UserId = this.User.Identity.GetUserGuid();
            response = Factory.UserService.SaveUserInformationWithSocialMedia(request);
            return response;
        }

        [HttpGet]
        public List<SocialMedia> GetAvailableSocialMedias()
        {
            return Factory.UserService.GetAvailableSocialMedias();
        }

        [HttpGet]
        public string GetUserNameById(Guid UserId)
        {
            return Factory.UserService.GetUserNameByUserId(this.User.Identity.GetUserGuid());
        }

        [HttpPost]
        public ResponseBase UpdateUserName(Guid UserId, string UserName)
        {
            return Factory.UserService.UpdateUserName(this.User.Identity.GetUserGuid(), UserName);
        }

        [HttpPost]
        public UserImageResponse UpdateUserImages(UserImageRequest request)
        {
            request.UserId = this.User.Identity.GetUserGuid();
            string photoPath = ConfigurationManager.AppSettings["UserPhotos"];
            string logoPath = ConfigurationManager.AppSettings["CompanyLogos"];
            if (!string.IsNullOrEmpty(request.FileForDelete))
            {
                if (request.FileForDelete == "photo")
                {
                    string photoExt = request.PhotoFileName.Split('.')[1];
                    if (!string.IsNullOrEmpty(request.PhotoFileName) &&
                        ContrastSecurityValidators.IsValidFileExt(photoExt))
                    {
                        DeleteImage(request.PhotoFileName, photoPath);
                        request.PhotoFileName = string.Empty;
                    }
                }

                if (request.FileForDelete == "logo")
                {
                    string logoExt = request.AgentLogoFileName.Split('.')[1];
                    if (!string.IsNullOrEmpty(request.AgentLogoFileName) &&
                        ContrastSecurityValidators.IsValidFileExt(logoExt))
                    {
                        DeleteImage(request.AgentLogoFileName, logoPath);
                        request.AgentLogoFileName = string.Empty;
                    }
                }

                var response = Factory.UserService.SaveUserImages(request);
            }

            return GetUserImages(request.UserId);
        }

        [HttpPost]
        public UserImageResponse SaveUserImages()
        {
            string photoPath = ConfigurationManager.AppSettings["UserPhotos"];
            string logoPath = ConfigurationManager.AppSettings["CompanyLogos"];

            var httpRequest = HttpContext.Current.Request;
            var request = new UserImageRequest();
            request.PhotoFileName = httpRequest.Form["current_photo"];
            request.AgentLogoFileName = httpRequest.Form["current_logo"];
            var extReg = new Regex(".*([Jj][Pp][Gg]|[Gg][Ii][Ff]|[Jj][Pp][Ee][Gg]|[Pp][Nn][Gg]|[Bb][Mm][Pp])");

            string preferredLogo =
                httpRequest.Form["preferred_logo"] != null && extReg.IsMatch(httpRequest.Form["preferred_logo"])
                    ? httpRequest.Form["preferred_logo"]
                    : "";

            request.UserId = new Guid(httpRequest.Form["userId"]);

            bool doUpdate = false;

            if (!string.IsNullOrEmpty(preferredLogo))
            {
                string preferredLogoExt = preferredLogo.Split('.')[1];
                preferredLogo = !string.IsNullOrEmpty(preferredLogo) &&
                                ContrastSecurityValidators.IsValidFileExt(preferredLogoExt)
                    ? preferredLogo
                    : "";
                request.AgentLogoFileName = preferredLogo;
                doUpdate = true;
            }

            if (httpRequest.Files.Count > 0)
            {

                var files = new List<string>();
                foreach (string key in httpRequest.Files)
                {
                    var postedFile = httpRequest.Files[key];
                    var fileExt =
                        postedFile != null &&
                        ContrastSecurityValidators.IsValidFileExt(postedFile.FileName.Split('.')[1])
                            ? postedFile.FileName.Split('.')[1]
                            : null;

                    if (postedFile != null && !fileExt.IsNullOrWhiteSpace())
                    {
                        doUpdate = true;
                        if (key == "photo")
                        {
                            Random num = new Random();


                            var fileName = "up_" + request.UserId.ToString() + "_T" + num.Next(10, 100).ToString("00");
                            fileName = fileName + "." +
                                       (ContrastSecurityValidators.IsValidFileExt(fileExt) ? fileExt : "");
                            int width = Convert.ToInt32(ConfigurationManager.AppSettings["UserPhotoMaxWidth"]);
                            int height = Convert.ToInt32(ConfigurationManager.AppSettings["UserPhotoMaxHeight"]);

                            byte[] fileData = null;
                            using (var binaryReader = new BinaryReader(postedFile.InputStream))
                            {
                                fileData = binaryReader.ReadBytes(postedFile.ContentLength);
                            }

                            FileScannerResult fileScannerResult =
                                FileUploadScanner.ScanFile(fileData, postedFile.FileName, postedFile.ContentType);
                            if (fileScannerResult.IsFileClean && !fileScannerResult.ProcessFailed)
                            {
                                SaveImageFile(fileData, fileName, photoPath, width, height);
                                request.PhotoFileName = fileName;
                            }
                        }
                        else if (key == "logo")
                        {
                            Random num = new Random();
                            var fileName = "ulogo_" + request.UserId.ToString() + "_T" +
                                           num.Next(10, 100).ToString("00");
                            fileName = fileName + "." +
                                       (ContrastSecurityValidators.IsValidFileExt(fileExt) ? fileExt : "");
                            int width = Convert.ToInt32(ConfigurationManager.AppSettings["CompanyLogoMaxWidth"]);
                            int height = Convert.ToInt32(ConfigurationManager.AppSettings["CompanyLogoMaxHeight"]);

                            byte[] fileData = null;
                            using (var binaryReader = new BinaryReader(postedFile.InputStream))
                            {
                                fileData = binaryReader.ReadBytes(postedFile.ContentLength);
                            }

                            FileScannerResult fileScannerResult =
                                FileUploadScanner.ScanFile(fileData, postedFile.FileName, postedFile.ContentType);
                            if (fileScannerResult.IsFileClean && !fileScannerResult.ProcessFailed)
                            {
                                SaveImageFile(fileData, fileName, logoPath, width, height);
                                request.AgentLogoFileName = fileName;
                            }
                        }
                    }
                }
            }

            if (doUpdate)
                Factory.UserService.SaveUserImages(request);

            return GetUserImages(request.UserId);
        }

        [HttpGet]
        public UserImageResponse GetUserImages(Guid UserId)
        {
            UserId = this.User.Identity.GetUserGuid();
            string photoPath = ConfigurationManager.AppSettings["UserPhotos"];
            string logoPath = ConfigurationManager.AppSettings["CompanyLogos"];

            var baseUri = new Uri(Url.Request.Headers.Referrer.AbsoluteUri);
            string defaultImageUrl = new Uri(baseUri, ConfigurationManager.AppSettings["DefaultImage"]).ToString();

            UserImageResponse resp = Factory.UserService.GetUserImagesByUserId(UserId);

            resp.PhotoFileName = resp.PhotoFileName ?? string.Empty;
            resp.AgentLogoFileName = resp.AgentLogoFileName ?? string.Empty;

            resp.PhotoUrl = string.IsNullOrEmpty(resp.PhotoFileName)
                ? defaultImageUrl
                : new Uri(baseUri, Path.Combine(photoPath, resp.PhotoFileName)).ToString();

            resp.LogoUrl = string.IsNullOrEmpty(resp.AgentLogoFileName)
                ? defaultImageUrl
                : new Uri(baseUri, Path.Combine(logoPath, resp.AgentLogoFileName)).ToString();

            return resp;
        }

        private UserImageResponse GetManagerImages(Guid ManagerId)
        {
            string photoPath = ConfigurationManager.AppSettings["UserPhotos"];
            string logoPath = ConfigurationManager.AppSettings["CompanyLogos"];

            var baseUri = new Uri(Url.Request.Headers.Referrer.AbsoluteUri);
            string defaultImageUrl = new Uri(baseUri, ConfigurationManager.AppSettings["DefaultImage"]).ToString();

            UserImageResponse resp = Factory.UserService.GetUserImagesByUserId(ManagerId);

            resp.PhotoUrl = string.IsNullOrEmpty(resp.PhotoFileName)
                ? defaultImageUrl
                : new Uri(baseUri, Path.Combine(photoPath, resp.PhotoFileName)).ToString();

            resp.LogoUrl = string.IsNullOrEmpty(resp.AgentLogoFileName)
                ? defaultImageUrl
                : new Uri(baseUri, Path.Combine(logoPath, resp.AgentLogoFileName)).ToString();

            return resp;
        }

        [HttpGet]
        public List<KeyValuePair<string, string>> GetAllUserLogos(string x)
        {
            string logoPath = ConfigurationManager.AppSettings["CompanyLogos"];

            var location = HttpContext.Current.Server.MapPath("~/" + logoPath);
            string[] images = Directory.EnumerateFiles(location, "*.*")
                .Select(p => Path.GetFileName(p)).ToArray();


            string baseUrl = HttpContext.Current.Request.Url.Host.ToString();
            var builder = new System.UriBuilder(baseUrl);
            builder.Path = logoPath;

            string imgUrl = string.Empty;
            var result = new List<KeyValuePair<string, string>>();
            foreach (string file in images)
            {
                imgUrl = builder.Uri.ToString() + file;
                result.Add(new KeyValuePair<string, string>(file, imgUrl));
            }

            return result;
        }

        [HttpGet]
        public UserTeamProfile GetTeamProfileByUserId()
        {
            var response = Factory.UserService.GetTeamProfileByUserId(this.User.Identity.GetUserGuid());
            var baseUri = new Uri(Url.Request.Headers.Referrer.AbsoluteUri);

            if (response.IsTeamAccount)
            {
                if (!string.IsNullOrEmpty(response.Photo))
                {
                    string photoPath = ConfigurationManager.AppSettings["UserPhotos"];
                    response.PhotoUrl = new Uri(baseUri,
                            Path.Combine(photoPath,
                                string.Concat(response.Photo, "?t=", DateTime.Now.Ticks.ToString())))
                        .ToString();
                }
            }

            if (string.IsNullOrEmpty(response.Photo))
                response.PhotoUrl = new Uri(baseUri, ConfigurationManager.AppSettings["DefaultImage"]).ToString();


            return response;
        }

        private UserTeamProfile GetManagerTeamProfile(Guid ManagerId)
        {
            var response = Factory.UserService.GetTeamProfileByUserId(ManagerId);
            if (response.IsTeamAccount)
            {
                var baseUri = new Uri(Url.Request.Headers.Referrer.AbsoluteUri);
                if (string.IsNullOrEmpty(response.Photo))
                    response.PhotoUrl = new Uri(baseUri, ConfigurationManager.AppSettings["DefaultImage"]).ToString();
                else
                {
                    string photoPath = ConfigurationManager.AppSettings["UserPhotos"];
                    response.PhotoUrl = new Uri(baseUri,
                            Path.Combine(photoPath,
                                string.Concat(response.Photo, "?t=", DateTime.Now.Ticks.ToString())))
                        .ToString();
                }
            }

            return response;
        }

        [HttpPost]
        public string RemoveTeamProfilePicture([FromBody] Guid UserId)
        {
            string path = ConfigurationManager.AppSettings["UserPhotos"];
            var profile = Factory.UserService.GetTeamProfileByUserId(this.User.Identity.GetUserGuid());
            string photoExt = profile.Photo.Split('.')[1];
            if (!string.IsNullOrEmpty(profile.Photo) &&
                ContrastSecurityValidators.IsValidFileExt(photoExt))
            {
                DeleteImage(profile.Photo, path);
                profile.Photo = string.Empty;
            }

            var response = Factory.UserService.SaveUserTeamProfile(profile);
            var baseUri = new Uri(Url.Request.Headers.Referrer.AbsoluteUri);
            string defaultPhotoUrl = new Uri(baseUri, ConfigurationManager.AppSettings["DefaultImage"]).ToString();
            return defaultPhotoUrl;
        }

        [HttpPost]
        public UserTeamProfile SaveUserTeamProfile()
        {
            var httpRequest = HttpContext.Current.Request;
            var request = new UserTeamProfile();
            request.UserId = this.User.Identity.GetUserGuid();
            request.IsTeamAccount = Convert.ToBoolean(httpRequest.Form["IsTeamAccount"]);
            if (request.IsTeamAccount)
            {
                if (!string.IsNullOrEmpty(httpRequest.Form["Birthday"]))
                    request.Birthday = Convert.ToDateTime(httpRequest.Form["Birthday"]);
                request.Department = httpRequest.Form["Department"];
                request.Email = httpRequest.Form["Email"];
                request.FirstName = httpRequest.Form["FirstName"];
                if (!string.IsNullOrEmpty(httpRequest.Form["ReceivesEmails"]))
                    request.ReceivesEmails = Convert.ToBoolean(httpRequest.Form["ReceivesEmails"]);
                request.LastName = httpRequest.Form["LastName"];
                request.MiddleName = httpRequest.Form["MiddleName"];
                request.PhoneFax = httpRequest.Form["PhoneFax"];
                request.PhoneWork = httpRequest.Form["PhoneWork"];
                request.PhoneWorkExt = httpRequest.Form["PhoneWorkExt"];
                request.Photo = httpRequest.Form["Photo"];

                if (httpRequest.Files.Count > 0)
                {
                    var postedFile = httpRequest.Files[0];
                    var fileExt =
                        postedFile != null &&
                        ContrastSecurityValidators.IsValidFileExt(postedFile.FileName.Split('.')[1])
                            ? postedFile.FileName.Split('.')[1]
                            : null;

                    if (httpRequest.Files.Count > 0 && !fileExt.IsNullOrWhiteSpace())
                    {
                        var files = new List<string>();
                        var fileName = "tp_" + request.UserId.ToString();
                        fileName = fileName + "." + (ContrastSecurityValidators.IsValidFileExt(fileExt) ? fileExt : "");
                        string path = ConfigurationManager.AppSettings["UserPhotos"];
                        int width = Convert.ToInt32(ConfigurationManager.AppSettings["UserPhotoMaxWidth"]);
                        int height = Convert.ToInt32(ConfigurationManager.AppSettings["UserPhotoMaxHeight"]);

                        byte[] fileData = null;
                        using (var binaryReader = new BinaryReader(postedFile.InputStream))
                        {
                            fileData = binaryReader.ReadBytes(postedFile.ContentLength);
                        }

                        FileScannerResult fileScannerResult =
                            FileUploadScanner.ScanFile(fileData, postedFile.FileName, postedFile.ContentType);
                        if (fileScannerResult.IsFileClean && !fileScannerResult.ProcessFailed)
                        {
                            SaveImageFile(fileData, fileName, path, width, height);
                            request.Photo = fileName;
                        }
                    }
                }
            }

            var response = Factory.UserService.SaveUserTeamProfile(request);
            return GetTeamProfileByUserId();
        }

        [HttpGet]
        public bool IsNetsellersUser(Guid userId)
        {
            return Factory.UserService.IsNetsellersUser(this.User.Identity.GetUserGuid());
        }

        [HttpGet]
        public QuickMenuResponse GetQuickMenuItems(int brandId, int operationId, Guid userId)
        {
            userId = this.User.Identity.GetUserGuid();
            brandId = this.User.Identity.GetCurrentBrandId();
            operationId = this.User.Identity.GetDefaultOperationId();
            var menuItems = Factory.QuickMenuService.GetQuickMenuItems(brandId, operationId, userId);

            String strPathAndQuery = HttpContext.Current.Request.Url.PathAndQuery;
            String strUrl = HttpContext.Current.Request.Url.AbsoluteUri.Replace(strPathAndQuery, "/");

            string baseUrl = strUrl.Replace("cp.", "");
            foreach (var item in menuItems)
            {
                if (item.URL.Contains("~/") && item.External == true)
                    item.URL = item.URL.Replace("~/", baseUrl);

            }

            var urls = from item in menuItems
                       where !string.IsNullOrEmpty(item.CpUrl)
                       select item.CpUrl;

            var routes = Factory.SiteService.GetClientPortalRoutes(urls.ToList());

            var response = new QuickMenuResponse();
            response.MenuItems = menuItems;
            response.RoutesList = routes;
            return response;
        }

        [HttpGet]
        public QuickMenuResponse GetAdminMenuItems(int brandId, int operationId, Guid userId)
        {
            userId = this.User.Identity.GetUserGuid();
            brandId = this.User.Identity.GetCurrentBrandId();
            operationId = this.User.Identity.GetDefaultOperationId();
            var menuItems = Factory.QuickMenuService.GetAdminMenuItems(brandId, operationId, userId);

            String strPathAndQuery = HttpContext.Current.Request.Url.PathAndQuery;
            String strUrl = HttpContext.Current.Request.Url.AbsoluteUri.Replace(strPathAndQuery, "/");

            string baseUrl = strUrl.Replace("cp.", "");
            foreach (var item in menuItems)
            {
                if (item.URL.Contains("~/") && item.External == true)
                    item.URL = item.URL.Replace("~/", baseUrl);

            }

            var urls = from item in menuItems
                       where !string.IsNullOrEmpty(item.CpUrl)
                       select item.CpUrl;

            var routes = Factory.SiteService.GetClientPortalRoutes(urls.ToList());

            var response = new QuickMenuResponse();
            response.MenuItems = menuItems;
            response.RoutesList = routes;
            return response;
        }

        [HttpGet]
        public bool ShowPurchasableProducts()
        {
            Guid userId = this.User.Identity.GetUserGuid();
            int brandId = this.User.Identity.GetCurrentBrandId();
            int operationId = this.User.Identity.GetDefaultOperationId();
            return Factory.QuickMenuService.ShowPurchasableProducts(brandId, operationId, userId);
        }

        [HttpGet]
        public QuickMenuResponse GetQuickMenuItemsCustomize(int brandId, int operationId, Guid userId)
        {
            userId = this.User.Identity.GetUserGuid();
            brandId = this.User.Identity.GetCurrentBrandId();
            operationId = this.User.Identity.GetDefaultOperationId();
            var menuItems = Factory.QuickMenuService.GetQuickMenuItemsCustomize(brandId, operationId, userId);

            String strPathAndQuery = HttpContext.Current.Request.Url.PathAndQuery;
            String strUrl = HttpContext.Current.Request.Url.AbsoluteUri.Replace(strPathAndQuery, "/");

            string baseUrl = strUrl.Replace("cp.", "");
            foreach (var item in menuItems)
            {
                if (item.URL.Contains("~/") && item.External == true)
                    item.URL = item.URL.Replace("~/", baseUrl);

            }

            var urls = from item in menuItems
                       where !string.IsNullOrEmpty(item.CpUrl)
                       select item.CpUrl;

            var routes = Factory.SiteService.GetClientPortalRoutes(urls.ToList());

            var response = new QuickMenuResponse();
            response.MenuItems = menuItems;
            response.RoutesList = routes;
            return response;
        }

        [HttpGet]
        public string GetCurrentUserFullAddress()
        {
            return Factory.UserService.GetCurrentUserFullAddress(this.User.Identity.GetUserGuid());
        }

        [HttpGet]
        public GPSCP.Models.User.SalesExecutiveInformation GetSalesExecInfo()
        {
            int operationId = this.User.Identity.GetDefaultOperationId();
            string userName = this.User.Identity.Name;

            ApplicationUser user = Factory.UserManager.FindByNameAsync(userName).Result;
            SalesExecutiveInformation salesExecInfo = Factory.UserService.GetSalesExecInfo(operationId, user.Id);
            if (salesExecInfo != null)
            {
                string noImgPhotoPath = AppSettingsHelper.GPSSharedImagesFolder;
                string photoPath = ConfigurationManager.AppSettings["UserPhotos"];

                var baseUri = new Uri(Url.Request.Headers.Referrer.AbsoluteUri);
                string defaultPhotoUrl = new Uri(baseUri, string.Concat(noImgPhotoPath, "no_image.jpg")).ToString();

                salesExecInfo.PhotoUrl = string.IsNullOrEmpty(salesExecInfo.Photo)
                    ? defaultPhotoUrl
                    : new Uri(baseUri, Path.Combine(photoPath, salesExecInfo.Photo)).ToString();
            }

            return salesExecInfo;
        }

        [HttpGet]
        public bool IsEz2ReadEnabled(int operationId, int serviceId)
        {
            operationId = this.User.Identity.GetDefaultOperationId();
            if (Factory.UserService.GetOperationEz2ReadCompsServiceInformation(operationId, serviceId) != null)
            {
                return true;
            }

            return false;
        }

        #region Image File Helpers

        private void SaveImageFile(byte[] fileData, string fileName, string directory, int width, int height)
        {
            if (ContrastSecurityValidators.IsValidFileName(fileName))
            {
                string filePath = HttpContext.Current.Server.MapPath("~/" + directory);
                System.IO.File.WriteAllBytes(filePath + fileName, fileData);
            }
        }

        private static byte[] ResizeImage(byte[] photo, int maxwidth, int maxheight)
        {
            Image image;
            byte[] ret = photo;

            if (maxwidth > 0 && maxheight > 0)
            {
                using (MemoryStream ms = new MemoryStream(photo))
                {
                    using (image = Image.FromStream(ms))
                    {
                        if (image.Width > maxwidth || image.Height > maxheight)
                        {
                            int origwidth = (int)image.PhysicalDimension.Width;
                            int origheight = (int)image.PhysicalDimension.Height;

                            float aspect = (float)origwidth / (float)origheight;

                            int newheight = (int)(maxwidth / aspect);
                            int newwidth = (int)(maxheight * aspect);

                            if (newheight > maxheight)
                            {
                                ret = SizeImage(image, newwidth, maxheight);
                            }
                            else
                            {
                                ret = SizeImage(image, maxwidth, newheight);
                            }
                        }
                    }

                    ms.Close();
                }
            }

            return ret;
        }

        private static byte[] SizeImage(Image image, int width, int height)
        {
            Image thumb = image;
            ImageFormat imageFormat = image.RawFormat; // Remember the original image format.

            if (width > 0 && height > 0)
            {
                try
                {
                    if (image.PixelFormat == PixelFormat.Indexed ||
                        image.PixelFormat == PixelFormat.Format8bppIndexed ||
                        image.PixelFormat == PixelFormat.Format4bppIndexed ||
                        image.PixelFormat == PixelFormat.Format1bppIndexed)
                    {
                        //re-work this part.  Indexed images doesn't look good
                        //consider converting them to any RGB format.

                        //convert format
                        thumb = new Bitmap(width, height, PixelFormat.Format32bppArgb);
                        ((Bitmap)thumb).SetResolution(image.HorizontalResolution, image.VerticalResolution);
                    }
                    else
                    {
                        thumb = new Bitmap(width, height, image.PixelFormat);
                    }

                    Graphics graphic = Graphics.FromImage(thumb);
                    graphic.CompositingQuality = CompositingQuality.HighQuality;
                    graphic.SmoothingMode = SmoothingMode.HighQuality;
                    graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    Rectangle rectangle = new Rectangle(0, 0, width, height);
                    graphic.DrawImage(image, rectangle);
                    graphic.Dispose();
                }
                catch (Exception ex1)
                {
                    throw (ex1);
                }

            }

            byte[] arrReturn;
            using (MemoryStream ms = new MemoryStream())
            {
                thumb.Save(ms, imageFormat);
                arrReturn = ms.GetBuffer();
                //ms.Close();
            }

            return arrReturn;
        }

        private void DeleteImage(string file, string path)
        {
            if (ContrastSecurityValidators.IsValidFileName(file))
            {
                string filePath = HttpContext.Current.Server.MapPath("~/" + path + file);
                if (File.Exists(filePath))
                    File.Delete(filePath);
            }
        }

        #endregion

        [HttpGet]
        public FavoritesListReponse GetFavorites(Guid userId)
        {
            userId = this.User.Identity.GetUserGuid();
            var favoritesList = Factory.UserService.GetFavorites(userId);
            int noLinks = Convert.ToInt32(ConfigurationManager.AppSettings["FavoriteLinks"]);
            bool showButton = true;
            if (favoritesList.Count >= noLinks)
            {
                showButton = false;
            }

            FavoritesListReponse response = new FavoritesListReponse();
            response.FavoritesList = favoritesList;
            response.ShowAddButton = showButton;
            return response;
        }

        [HttpPost]
        public bool SaveFavorite(FavoritesResponse fmodel)
        {
            Guid userId = this.User.Identity.GetUserGuid();
            bool success = Factory.UserService.SaveFavorite(fmodel, userId);
            return success;
        }

        [HttpGet]
        public ResponseBase ChangeFavoriteOrder(int favId, bool moveUp)
        {
            Guid userId = this.User.Identity.GetUserGuid();
            return Factory.UserService.ChangeFavoriteOrder(userId, favId, moveUp);
        }

        [HttpGet]
        public void ChangeQuickMenuItemOrder(int navLinkId, bool moveUp)
        {
            Guid userId = this.User.Identity.GetUserGuid();
            int operationId = this.User.Identity.GetDefaultOperationId();
            int brandId = this.User.Identity.GetCurrentBrandId();
            Factory.QuickMenuService.ChangeQuickMenuItemOrder(userId, navLinkId, moveUp, operationId, brandId);
        }

        [HttpGet]
        public void SortAlphabetically()
        {
            Guid userId = this.User.Identity.GetUserGuid();
            int operationId = this.User.Identity.GetDefaultOperationId();
            int brandId = this.User.Identity.GetCurrentBrandId();
            Factory.QuickMenuService.SortAlphabetically(userId, operationId, brandId);
        }

        [HttpGet]
        public void ToggleVisibilityQuickMenu(int navLinkId)
        {
            Guid userId = this.User.Identity.GetUserGuid();
            int operationId = this.User.Identity.GetDefaultOperationId();
            int brandId = this.User.Identity.GetCurrentBrandId();
            Factory.QuickMenuService.ToggleVisibilityQuickMenu(userId, navLinkId, operationId, brandId);
        }



        [HttpGet]
        public ProductMenuContainer GetProductMenuItems()
        {
            Guid userId = this.User.Identity.GetUserGuid();
            int operationId = this.User.Identity.GetDefaultOperationId();
            var productsList = Factory.UserService.GetProductsMenu(operationId, userId);
            var productsListChanged = new List<ProductsMenuResponse>(productsList);

            ProductMenuContainer productMenuContainer = new ProductMenuContainer();
            productMenuContainer.menuList = new List<ProductsMenuResponse>();
            int classicEFarmServiceId = 3, nextGenEFarmServiceId = 102;
            var eFarmItems = productsList.Where(p =>
                p.ServiceId.Equals(classicEFarmServiceId) || p.ServiceId.Equals(nextGenEFarmServiceId));
            productMenuContainer.isPromptClassicEfarmMessage = eFarmItems.Count() == 2;

            if (productMenuContainer.isPromptClassicEfarmMessage)
            {
                var classiceFarmProduct =
                    productsList.Where(p => p.ServiceId.Equals(classicEFarmServiceId)).FirstOrDefault();
                var nextGeneFarmProduct =
                    productsList.Where(p => p.ServiceId.Equals(nextGenEFarmServiceId)).FirstOrDefault();

                var Line1 = ConfigurationManager.AppSettings["BKEFarmPromptMessageLine1"];
                var Line2 = ConfigurationManager.AppSettings["BKEFarmPromptMessageLine2"];
                productMenuContainer.classicEFarmName = classiceFarmProduct.Name;
                productMenuContainer.nextGenEFarmName = nextGeneFarmProduct.Name;
                var message = "";

                if (!string.IsNullOrEmpty(Line1) && !string.IsNullOrEmpty(Line2))
                {
                    message = string.Format("<span>{0}</span></br><span>{1}</span>", Line1, Line2);
                }
                else if (!string.IsNullOrEmpty(Line1))
                {
                    message = string.Format("<span>{0}</span>", Line1);
                }
                else if (!string.IsNullOrEmpty(Line2))
                {
                    message = string.Format("<span>{0}</span>", Line2);
                }
                else
                {
                    productMenuContainer.isPromptClassicEfarmMessage = false;
                }

                var format = "<b>{0}</b>";

                var classiceFarmToken = "$classicEFarm$";
                var nextGenEFarmToken = "$nextGenEFarm$";

                //productMenuContainer.promptClassicEfarmMessage = message.Replace("$classicEFarm$", string.Format("<b>{0}</b>", classiceFarmProduct.Name)).Replace("$nextGenEFarm$", string.Format("<b>{0}</b>", nextGeneFarmProduct.Name));
                productMenuContainer.promptClassicEfarmMessage = message
                    .Replace(classiceFarmToken, string.Format(format, classiceFarmProduct.Name))
                    .Replace(nextGenEFarmToken, string.Format(format, nextGeneFarmProduct.Name));
            }


            foreach (ProductsMenuResponse response in productsList)
            {
                string credits = Factory.PropertyService.GetCredits(userId, response.ServiceId, operationId);
                response.Credits = credits;
                int limits = Factory.PropertyService.GetUsageLimit(userId, response.ServiceId, operationId);
                response.Limits = limits;

                //if (response.ServiceId == 92 || response.ServiceId == 94) //&& response.Limits <= 0)
                //    productsListChanged.Remove(response);
            }

            productMenuContainer.menuList.AddRange(productsListChanged);
            return productMenuContainer;
        }

        [HttpGet]
        public string GetSsoUrl(SsoTargetEnum ssoTarget)
        {
            var brandId = this.User.Identity.GetCurrentBrandId();
            var userId = new Guid(this.User.Identity.GetUserId());
            var operationId = this.User.Identity.GetDefaultOperationId();
            

            if (ConfigManager.Okta.Settings.UseOktaAuthentication)
            {                
                string oktaIdToken = this.User.Identity.GetOktaToken("id");
                string oktaAccessToken = this.User.Identity.GetOktaToken("access");

                return Factory.UserService.GetOktaSsoUrl(userId, brandId, operationId, oktaIdToken, oktaAccessToken, ssoTarget);
            }                
            else
                return Factory.UserService.GetSsoUrl(userId, brandId, operationId, ssoTarget);
        }

        public List<OperationServiceResponse> GetOperationServices()
        {
            var brandId = this.User.Identity.GetCurrentBrandId();
            var operationId = this.User.Identity.GetDefaultOperationId();
            var response = Factory.UserService.GetOperationServices(operationId);
            OperationServiceResponse opn = response.Find(i => i.ServiceId == 23);
            if (opn != null)
            {
                string brandName = ((GPSBrands)brandId).ToString();
                int index = brandName.IndexOf("Title");
                brandName = brandName.Remove(index);
                opn.Url = opn.Url.Replace("[BRAND NAME]", brandName);
            }
            //OperationServiceResponse opn1 = response.Find(i => i.ServiceId == 96);
            //if (opn1 != null)
            //    opn1.Url = "https://ez2readcomps.com/Login.aspx";

            return response;
        }

        [HttpGet]
        public bool GetPasswordChangeAlert()
        {
            bool isChangePassword = false;
            List<PasswordHistory> lstPasswordHistory = new List<PasswordHistory>();
            var userId = new Guid(this.User.Identity.GetUserId());
            lstPasswordHistory = Factory.UserService.GetUserPasswordHistory(userId);
            var PasswordChangeAlert = ConfigurationManager.AppSettings["PasswordChangeAlert"];
            int noOfDays = 0;
            var result = lstPasswordHistory.OrderByDescending(i => i.CreateDate).ToList()[0];
            if (result != null)
            {
                noOfDays = DateTime.Now.Date.Subtract(result.CreateDate).Days;
            }

            if (!string.IsNullOrEmpty(PasswordChangeAlert))
            {
                if (noOfDays >= Convert.ToInt32(PasswordChangeAlert))
                {
                    isChangePassword = true;
                }
            }
            else
            {
                if (noOfDays >= 90)
                {
                    isChangePassword = true;
                }
            }

            return isChangePassword;
        }

        [HttpPost]
        public ResponseBase UpdatePasswordHistory()
        {
            var userId = new Guid(this.User.Identity.GetUserId());
            return Factory.UserService.UpdatePasswordHistory(userId);
        }

        [HttpGet]
        public string GetWebinarSiteURL()
        {
            return Factory.UserService.GetWebinarSiteURL(new ExternalSiteSessionKey()
            {
                EmailAddress = this.User.Identity.GetUserEmail(),
                UserId = new Guid(this.User.Identity.GetUserId()),
                OperationId = this.User.Identity.GetDefaultOperationId()
            });
        }

        [HttpGet]
        public bool IsUserAEmployee()
        {
            return Factory.UserService.IsEmployee(this.User.Identity.GetUserGuid());
        }

        [HttpPost]
        public UserOperationsResponse UpdateUserDefaultOperation(int OperationId)
        {
            Guid UserId = this.User.Identity.GetUserGuid();
            //Check if the OperationId is assigned to the user or not.
            //if assigned, change the default operation to this OperationId
            //else return false
            //Return ture if the DB update is successful else false

            UserOperationsResponse UserOpnResponse =
                Factory.UserService.SaveUserDefaultOperation(this.User.Identity.GetUserGuid(),
                    this.User.Identity.GetCurrentBrandId(), OperationId);
            return UserOpnResponse;
        }

        [HttpGet]
        public TCPAConsentStatus GetTCPAConsentStatusForUser()
        {
            TCPAConsentStatus response = Factory.TCPAService.GetTCPAConsentStatusForUser(
                this.User.Identity.GetUserGuid(), this.User.Identity.GetDefaultOperationId(),
                this.User.Identity.GetUserEmail());
            return response;
        }

        [HttpGet]
        public TCPAAttributesForUser GetTCPAConsentDetailsForUser()
        {
            TCPAAttributesForUser response =
                Factory.TCPAService.GetTCPAConsentDetailsForUser(this.User.Identity.GetUserGuid(),
                    this.User.Identity.GetDefaultOperationId());
            response.UserEmail = this.User.Identity.GetUserEmail();
            response.Environment = AppSettingsHelper.ApplicationStage;
            return response;
        }

        [HttpPost]
        public TCPADeclineResponse UserRejectedTCPAConsent()
        {
            TCPADeclineResponse response = Factory.TCPAService.UserRejectedTCPAConsent(this.User.Identity.GetUserGuid(),
                this.User.Identity.GetDefaultOperationId(), this.User.Identity.GetUserEmail());
            return response;
        }

        [HttpPost]
        public TCPAAcceptedResponse UserAcceptedTCPAConsent()
        {
            TCPAAcceptedResponse response = Factory.TCPAService.UserAcceptedTCPAConsent(
                this.User.Identity.GetUserGuid(), this.User.Identity.GetDefaultOperationId(),
                this.User.Identity.GetUserEmail());
            return response;
        }

        [HttpGet]
        public TCPAStatusFromRemoteServer IsTCPAConsentRequiredFromRemoteServer()
        {
            Guid guid = this.User.Identity.GetUserGuid();
            TCPAStatusFromRemoteServer response =
                Factory.TCPAService.GetIsTCPAConsentRequiredFromRemoteServer(this.User.Identity.GetDefaultOperationId(),
                    this.User.Identity.GetUserEmail(),guid);
            return response;
        }

        [HttpPost]
        public TCPAStatusFromRemoteServer RevokeTCPAConsent()
        {
            Guid guid = this.User.Identity.GetUserGuid();
            TCPAStatusFromRemoteServer response =
                Factory.TCPAService.RevokeTCPAConsent(this.User.Identity.GetDefaultOperationId(),
                    this.User.Identity.GetUserEmail(), guid);
            return response;
        }

        [HttpGet]
        public string GetLastUserActivity()
        {
            return Factory.UserService.GetAspNetUserById(new Guid(this.User.Identity.GetUserId())).LastActivityDate
                .ToString();
        }

        [HttpGet]
        public string GetUserLastLoginDate()
        {
            return this.User.Identity.GetCurrentUserLastLoginDate();

            //return Factory.UserService.GetAspNetMemberById(new Guid(this.User.Identity.GetUserId())).LastLoginDate.ToString();
        }

        /*[HttpGet]
        public string GetFarmingAppSsoUrl(string authBearerToken)
        {
            *//*bool isOktaAuthEnabled = false;
            bool.TryParse(ConfigurationManager.AppSettings["okta:UseOktaAuthentication"], out isOktaAuthEnabled);
            return isOktaAuthEnabled ? null :*//*
            return Factory.UserService.GetFarmingSsoUrl(authBearerToken);
        }*/

        [HttpGet]
        public FarmingSsoUrlResponse GetFarmingAppSsoUrl()
        {
            var userId = new Guid(this.User.Identity.GetUserId());
            var operationId = this.User.Identity.GetDefaultOperationId();

            if (ConfigManager.Okta.Settings.UseOktaAuthentication)
            {
                var brandId = this.User.Identity.GetCurrentBrandId();
                string oktaAccessToken = this.User.Identity.GetOktaToken("access");

                return Factory.UserService.GetFarmingOktaSsoUrl(oktaAccessToken, brandId, operationId);
            }
            else
                return Factory.UserService.GetFarmingSsoUrl(userId, operationId);
        }
        
    }

}

UserService.cs

        public async Task<List<string>> GetList()
        {
            UserInformationProvider userInformationProvider = new UserInformationProvider(Factory);
            return await userInformationProvider.GetList();
        }

--------------------------------------------------------------

UserInformationProvider.cs

public async Task<List<string>> GetList()
{
    AspNetUserRepository aspNetProfileRepository = new AspNetUserRepository(DataContext);
    return await aspNetProfileRepository.GetList();



}

-----------------------------------------

AspNetUserRepository.cs

public async Task<List<string>> GetList()
{
    try
    {
        var users = await this.FindBy(i => i.IsAnonymous == false)
                             .Take(50).Select(i=>i.UserName)
                             .ToListAsync();
        return users;
    }
    catch (Exception ex)
    {
        // Log the exception (e.g., _logger.LogError(ex, "Error retrieving user list");
        throw; // Re-throw or handle as needed
    }
}

--------------------------

AspNetRoleRepository.cs

public async Task<IList<string>> GetRole()
{
    var roles = await this.FindBy(i => i.RoleName != "Customer").ToListAsync();
    return roles.Select(r => r.RoleName).ToList();
}



public async Task<bool> GetRoleId(Guid roleid)
{
    var roles = await this.FindBy(i => i.RoleId == roleid && i.RoleName== "Customer").FirstOrDefaultAsync();



    return roles!=null;
}

----------------------

IUserService.cs

Task<List<string>> GetList();

-------------------------------------

ApplicationUserStore.cs

  public async Task<IList<string>> GetRole()
  {
      AspNetRoleRepository roleRepository = new AspNetRoleRepository(DataContext);
      var roles = await roleRepository.GetRole();
      return roles;
  }
  public async Task<bool> GetRoleId(Guid roleid)
  {
      AspNetRoleRepository roleRepository = new AspNetRoleRepository(DataContext);
      var roles = await roleRepository.GetRoleId(roleid);



      return roles;
  }

-------------------------------------

ApplicationUserManager.cs

public async Task<IList<string>> GetRoles()
{
     return await UserStore.GetRole();
}
public async Task<bool> GetRoleId(Guid roleid)
{
     return await UserStore.GetRoleId(roleid);
}

-----------------------------------

UserController.cs

[AllowAnonymous]
[HttpGet]
public async Task<List<string>> UserRetrive()
{
    //string currentUserEmail = this.User.Identity.GetUserName();
   
        var userBrands = await Factory.UserService.GetList();
        return userBrands;



  
}



[AllowAnonymous]
[HttpGet]
[ActionName("checkUserRole")]



public async Task<bool> checkUserRole(Guid Userid)
{
    var userrole =  Factory.UserService.GetUserRolesByUserId(Userid); // get roleid
    type = await Factory.UserManager.GetRoleId(userrole.FirstOrDefault().Value); //check rolename of that roleid 
    return type;
}

------------------------------------------------

learn.js

define(['plugins/router', 'knockout', 'durandal/app', 'plugins/http', 'global/session', 'config'],
    function (router, ko, app, https, session, config) {
        var vm = {
            compositionComplete: compositionComplete,
            fetchRoles: fetchRoles,
        };
        function compositionComplete() {
            console.log('compositionComplete');
            fetchRoles();
        }
        function getUserInfoByEmail(email) {
            var url = config.getUserInfoByEmailUrl;
            session.isAjaxPost(true);



            return https.get(url, {
                email: email,
                format: 'json'
            })
                .then(function (data) {
                    console.log("UserId:", data.UserId);
                    return data.UserId; // Return the UserId to be used in the next call
                })
                .catch(function (error) {
                    console.error("Error fetching user info:", error);
                    throw error;
                });
        }



        function checkUserRoleByUserId(userId) {
            var url = config.checkUserRoleUrl;
            session.isAjaxPost(true);



            return https.get(url, {
                UserId: userId,
                format: 'json'
            })
                .then(function (data) {
                    console.log("roleiiiiiiiiiiiiid");
                    console.log("User Role Data:", data);
                    return data;
                })
                .catch(function (error) {
                    console.error("Error checking user role:", error);
                });
        }





        async function fetchRoles() {
            const rolesList = document.getElementById('rolesList');
            const errorMessage = document.getElementById('errorMessage');
            var d = localStorage.getItem('okta-token-storage');
            var parsedData = JSON.parse(d);
            rolesList.innerHTML = '';



            // Access the preferred_username
            var preferredUsername = parsedData.idToken?.claims?.preferred_username;



            const userId = await getUserInfoByEmail(preferredUsername);
            console.log("a", userId);
            // Step 2: Check user role
            const hasRole = await checkUserRoleByUserId(userId); //true = customer , false = others
            if (hasRole) { rolesList.innerHTML = '<li>No permission</li>'; }
            else {
                try {
                    const response = await fetch(config.userdataUrl);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }



                    const roles = await response.json();



                    if (roles.length === 0) {
                        rolesList.innerHTML = '<li>No roles found.</li>';
                    } else {
                        roles.forEach(role => {
                            const li = document.createElement('li');
                            li.textContent = role;
                            li.className = 'text-gray-700';
                            rolesList.appendChild(li);
                        });
                    }
                } catch (error) {
                    console.log("error");
                    console.error('Error fetching roles:', error.message);
                    errorMessage.textContent = `Error fetching roles: ${error.message}`;
                    errorMessage.classList.remove('hidden');
                }
            }
        }
        return vm;
    });

--------------------------

learn.html

<div>
    <h1>User List</h1>
    <div class="table-responsive">
        <table id="rolesTable">
            <thead>
                <tr>
                    <th>User List</th>
                </tr>
            </thead>
            <tbody id="rolesList"></tbody>
        </table>
    </div>
    <p id="errorMessage" class="text-red-500 mt-4 hidden"></p>
</div>


using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TaskApp.Models;

namespace TaskApp.Controllers
{
    public class TaskController : Controller
    {
        private readonly ApplicationDbContext _context;

        public TaskController(ApplicationDbContext context)
        {
            _context = context;
        }

        //For Index
        public async Task<IActionResult> Index(string status, string priority)
        {
            var query = _context.TaskItems.AsQueryable();

            if(!string.IsNullOrEmpty(status))
                query = query.Where(t => t.Status == status);

            if(!string.IsNullOrEmpty(priority))
                query = query.Where(t => t.Priority == priority);

            return View(await query.ToListAsync());
        }

        //To Create View
        public IActionResult Create() => View();

        [HttpPost]
        public async Task<IActionResult> Create(TaskItem task)
        {
            if (ModelState.IsValid)
            {
                _context.Add(task);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(task);
        }

        //To Edit View
        public async Task<IActionResult> Edit(int id)
        {
            var task = await _context.TaskItems.FindAsync(id);
            return task == null ? NotFound() : View(task);
        }
        [HttpPost]
        public async Task<IActionResult> Edit(TaskItem task)
        {
            if (ModelState.IsValid)
            {
                _context.Update(task);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(task);
        }

        //To Delete View
        public async Task<IActionResult> Delete(int id)
        {
            var task = await _context.TaskItems.FindAsync(id);
            if(task != null)
            {
                _context.TaskItems.Remove(task);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        //To Display details
        public async Task<IActionResult> Details(int? id)
        {
            if(id == null)
            {
                return NotFound();
            }

            var taskList = await _context.TaskItems.FirstOrDefaultAsync(m => m.Id == id);

            if (taskList == null)
            {
                return NotFound();
            }

            return View(taskList);
        }
    }
}

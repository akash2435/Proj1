Controller
 
[AllowAnonymous]
[HttpGet]
public async Task<IList<string>> UserRetrive()
{
    var userBrands = await Factory.UserManager.GetRoles();
    return userBrands;
}
 
application user manager
 
public async Task<IList<string>> GetRoles()
{
    return await UserStore.GetRole();
}
 
 
app user store
public async Task<IList<string>> GetRole()
{
    AspNetRoleRepository roleRepository = new AspNetRoleRepository(DataContext);
    var roles = await roleRepository.GetRole();
    return roles;
}
 
 
 
repo layer
public async Task<IList<string>> GetRole()
{
    var roles = await this.FindBy(i => i.RoleName != "Customer").ToListAsync();
    return roles.Select(r => r.RoleName).ToList();
}


learn.html
<div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
<h1 class="text-2xl font-bold mb-4 text-center">User Roles</h1>
<div class="table-responsive">
<table class="table table-bordered table-striped table-condensed w-full" id="rolesTable">
<thead>
<tr>
<th class="px-4 py-2 text-left text-gray-700">Role Name</th>
</tr>
</thead>
<tbody id="rolesList"></tbody>
</table>
</div>
<p id="errorMessage" class="text-red-500 mt-4 hidden"></p>
</div>

learn.js
define(['plugins/router', 'knockout', 'durandal/app', 'plugins/http', 'global/session', 'config'],
    function(router, ko, app, https, session, config) {
        var vm = {
            compositionComplete: compositionComplete,
            fetchRoles: fetchRoles,
        };
        function compositionComplete() {
            console.log('compositionComplete');
            fetchRoles();
        }
 
        async function fetchRoles() {
            const rolesList = document.getElementById('rolesList');
            const errorMessage = document.getElementById('errorMessage');
 
 
            try {
                const response = await fetch(config.userdataUrl);
 
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
 
                const roles = await response.json();
 
                rolesList.innerHTML = '';
                if (roles.length === 0) {
                    rolesList.innerHTML = '<li>No roles found.</li>';
                } else {
                    roles.forEach(role => {
                        const li = document.createElement('li');
                        li.textContent = role;
                        li.className = 'text-gray-700';
                        rolesList.appendChild(li);
                    });
                }
            } catch (error) {
                console.error('Error fetching roles:', error.message);
                errorMessage.textContent = `Error fetching roles: ${error.message}`;
                errorMessage.classList.remove('hidden');
            }
        }
 
        return vm;
    });
